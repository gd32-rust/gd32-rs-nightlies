#[doc = "Register `MTCTL0` reader"]
pub type R = crate::R<MTCTL0_SPEC>;
#[doc = "Register `MTCTL0` writer"]
pub type W = crate::W<MTCTL0_SPEC>;
#[doc = "Field `CNTCKDIV` reader - Counter clock division"]
pub type CNTCKDIV_R = crate::FieldReader;
#[doc = "Field `CNTCKDIV` writer - Counter clock division"]
pub type CNTCKDIV_W<'a, REG, const O: u8> = crate::FieldWriter<'a, REG, 2, O>;
#[doc = "Field `CTNM` reader - Continuous mode"]
pub type CTNM_R = crate::BitReader;
#[doc = "Field `CTNM` writer - Continuous mode"]
pub type CTNM_W<'a, REG, const O: u8> = crate::BitWriter<'a, REG, O>;
#[doc = "Field `CNTRSTM` reader - Counter reset mode"]
pub type CNTRSTM_R = crate::BitReader;
#[doc = "Field `CNTRSTM` writer - Counter reset mode"]
pub type CNTRSTM_W<'a, REG, const O: u8> = crate::BitWriter<'a, REG, O>;
#[doc = "Field `HALFM` reader - Half mode"]
pub type HALFM_R = crate::BitReader;
#[doc = "Field `HALFM` writer - Half mode"]
pub type HALFM_W<'a, REG, const O: u8> = crate::BitWriter<'a, REG, O>;
#[doc = "Field `SYNISRC` reader - Synchronization input source"]
pub type SYNISRC_R = crate::FieldReader;
#[doc = "Field `SYNISRC` writer - Synchronization input source"]
pub type SYNISRC_W<'a, REG, const O: u8> = crate::FieldWriter<'a, REG, 2, O>;
#[doc = "Field `SYNIRST` reader - Synchronization input reset counter"]
pub type SYNIRST_R = crate::BitReader;
#[doc = "Field `SYNIRST` writer - Synchronization input reset counter"]
pub type SYNIRST_W<'a, REG, const O: u8> = crate::BitWriter<'a, REG, O>;
#[doc = "Field `SYNISTRT` reader - Synchronization input start counter"]
pub type SYNISTRT_R = crate::BitReader;
#[doc = "Field `SYNISTRT` writer - Synchronization input start counter"]
pub type SYNISTRT_W<'a, REG, const O: u8> = crate::BitWriter<'a, REG, O>;
#[doc = "Field `SYNOPLS` reader - Synchronization output pulse"]
pub type SYNOPLS_R = crate::FieldReader;
#[doc = "Field `SYNOPLS` writer - Synchronization output pulse"]
pub type SYNOPLS_W<'a, REG, const O: u8> = crate::FieldWriter<'a, REG, 2, O>;
#[doc = "Field `SYNOSRC` reader - Synchronization output source"]
pub type SYNOSRC_R = crate::FieldReader;
#[doc = "Field `SYNOSRC` writer - Synchronization output source"]
pub type SYNOSRC_W<'a, REG, const O: u8> = crate::FieldWriter<'a, REG, 2, O>;
#[doc = "Field `MTCEN` reader - The counter of Master_TIMER enable"]
pub type MTCEN_R = crate::BitReader;
#[doc = "Field `MTCEN` writer - The counter of Master_TIMER enable"]
pub type MTCEN_W<'a, REG, const O: u8> = crate::BitWriter<'a, REG, O>;
#[doc = "Field `ST0CEN` reader - The counter of Slave_TIMER0 enable"]
pub type ST0CEN_R = crate::BitReader;
#[doc = "Field `ST0CEN` writer - The counter of Slave_TIMER0 enable"]
pub type ST0CEN_W<'a, REG, const O: u8> = crate::BitWriter<'a, REG, O>;
#[doc = "Field `ST1CEN` reader - The counter of Slave_TIMER1 enable"]
pub type ST1CEN_R = crate::BitReader;
#[doc = "Field `ST1CEN` writer - The counter of Slave_TIMER1 enable"]
pub type ST1CEN_W<'a, REG, const O: u8> = crate::BitWriter<'a, REG, O>;
#[doc = "Field `ST2CEN` reader - The counter of Slave_TIMER2 enable"]
pub type ST2CEN_R = crate::BitReader;
#[doc = "Field `ST2CEN` writer - The counter of Slave_TIMER2 enable"]
pub type ST2CEN_W<'a, REG, const O: u8> = crate::BitWriter<'a, REG, O>;
#[doc = "Field `ST3CEN` reader - The counter of Slave_TIMER3 enable"]
pub type ST3CEN_R = crate::BitReader;
#[doc = "Field `ST3CEN` writer - The counter of Slave_TIMER3 enable"]
pub type ST3CEN_W<'a, REG, const O: u8> = crate::BitWriter<'a, REG, O>;
#[doc = "Field `ST4CEN` reader - The counter of Slave_TIMER4 enable"]
pub type ST4CEN_R = crate::BitReader;
#[doc = "Field `ST4CEN` writer - The counter of Slave_TIMER4 enable"]
pub type ST4CEN_W<'a, REG, const O: u8> = crate::BitWriter<'a, REG, O>;
#[doc = "Field `DACTRGS` reader - Trigger source to DAC"]
pub type DACTRGS_R = crate::FieldReader;
#[doc = "Field `DACTRGS` writer - Trigger source to DAC"]
pub type DACTRGS_W<'a, REG, const O: u8> = crate::FieldWriter<'a, REG, 2, O>;
#[doc = "Field `SHWEN` reader - Shadow registers enable"]
pub type SHWEN_R = crate::BitReader;
#[doc = "Field `SHWEN` writer - Shadow registers enable"]
pub type SHWEN_W<'a, REG, const O: u8> = crate::BitWriter<'a, REG, O>;
#[doc = "Field `UPREP` reader - Update event generated by repetition event"]
pub type UPREP_R = crate::BitReader;
#[doc = "Field `UPREP` writer - Update event generated by repetition event"]
pub type UPREP_W<'a, REG, const O: u8> = crate::BitWriter<'a, REG, O>;
#[doc = "Field `UPSEL` reader - Update event selection"]
pub type UPSEL_R = crate::FieldReader;
#[doc = "Field `UPSEL` writer - Update event selection"]
pub type UPSEL_W<'a, REG, const O: u8> = crate::FieldWriter<'a, REG, 2, O>;
impl R {
    #[doc = "Bits 0:1 - Counter clock division"]
    #[inline(always)]
    pub fn cntckdiv(&self) -> CNTCKDIV_R {
        CNTCKDIV_R::new((self.bits & 3) as u8)
    }
    #[doc = "Bit 3 - Continuous mode"]
    #[inline(always)]
    pub fn ctnm(&self) -> CTNM_R {
        CTNM_R::new(((self.bits >> 3) & 1) != 0)
    }
    #[doc = "Bit 4 - Counter reset mode"]
    #[inline(always)]
    pub fn cntrstm(&self) -> CNTRSTM_R {
        CNTRSTM_R::new(((self.bits >> 4) & 1) != 0)
    }
    #[doc = "Bit 5 - Half mode"]
    #[inline(always)]
    pub fn halfm(&self) -> HALFM_R {
        HALFM_R::new(((self.bits >> 5) & 1) != 0)
    }
    #[doc = "Bits 8:9 - Synchronization input source"]
    #[inline(always)]
    pub fn synisrc(&self) -> SYNISRC_R {
        SYNISRC_R::new(((self.bits >> 8) & 3) as u8)
    }
    #[doc = "Bit 10 - Synchronization input reset counter"]
    #[inline(always)]
    pub fn synirst(&self) -> SYNIRST_R {
        SYNIRST_R::new(((self.bits >> 10) & 1) != 0)
    }
    #[doc = "Bit 11 - Synchronization input start counter"]
    #[inline(always)]
    pub fn synistrt(&self) -> SYNISTRT_R {
        SYNISTRT_R::new(((self.bits >> 11) & 1) != 0)
    }
    #[doc = "Bits 12:13 - Synchronization output pulse"]
    #[inline(always)]
    pub fn synopls(&self) -> SYNOPLS_R {
        SYNOPLS_R::new(((self.bits >> 12) & 3) as u8)
    }
    #[doc = "Bits 14:15 - Synchronization output source"]
    #[inline(always)]
    pub fn synosrc(&self) -> SYNOSRC_R {
        SYNOSRC_R::new(((self.bits >> 14) & 3) as u8)
    }
    #[doc = "Bit 16 - The counter of Master_TIMER enable"]
    #[inline(always)]
    pub fn mtcen(&self) -> MTCEN_R {
        MTCEN_R::new(((self.bits >> 16) & 1) != 0)
    }
    #[doc = "Bit 17 - The counter of Slave_TIMER0 enable"]
    #[inline(always)]
    pub fn st0cen(&self) -> ST0CEN_R {
        ST0CEN_R::new(((self.bits >> 17) & 1) != 0)
    }
    #[doc = "Bit 18 - The counter of Slave_TIMER1 enable"]
    #[inline(always)]
    pub fn st1cen(&self) -> ST1CEN_R {
        ST1CEN_R::new(((self.bits >> 18) & 1) != 0)
    }
    #[doc = "Bit 19 - The counter of Slave_TIMER2 enable"]
    #[inline(always)]
    pub fn st2cen(&self) -> ST2CEN_R {
        ST2CEN_R::new(((self.bits >> 19) & 1) != 0)
    }
    #[doc = "Bit 20 - The counter of Slave_TIMER3 enable"]
    #[inline(always)]
    pub fn st3cen(&self) -> ST3CEN_R {
        ST3CEN_R::new(((self.bits >> 20) & 1) != 0)
    }
    #[doc = "Bit 21 - The counter of Slave_TIMER4 enable"]
    #[inline(always)]
    pub fn st4cen(&self) -> ST4CEN_R {
        ST4CEN_R::new(((self.bits >> 21) & 1) != 0)
    }
    #[doc = "Bits 25:26 - Trigger source to DAC"]
    #[inline(always)]
    pub fn dactrgs(&self) -> DACTRGS_R {
        DACTRGS_R::new(((self.bits >> 25) & 3) as u8)
    }
    #[doc = "Bit 27 - Shadow registers enable"]
    #[inline(always)]
    pub fn shwen(&self) -> SHWEN_R {
        SHWEN_R::new(((self.bits >> 27) & 1) != 0)
    }
    #[doc = "Bit 29 - Update event generated by repetition event"]
    #[inline(always)]
    pub fn uprep(&self) -> UPREP_R {
        UPREP_R::new(((self.bits >> 29) & 1) != 0)
    }
    #[doc = "Bits 30:31 - Update event selection"]
    #[inline(always)]
    pub fn upsel(&self) -> UPSEL_R {
        UPSEL_R::new(((self.bits >> 30) & 3) as u8)
    }
}
impl W {
    #[doc = "Bits 0:1 - Counter clock division"]
    #[inline(always)]
    #[must_use]
    pub fn cntckdiv(&mut self) -> CNTCKDIV_W<MTCTL0_SPEC, 0> {
        CNTCKDIV_W::new(self)
    }
    #[doc = "Bit 3 - Continuous mode"]
    #[inline(always)]
    #[must_use]
    pub fn ctnm(&mut self) -> CTNM_W<MTCTL0_SPEC, 3> {
        CTNM_W::new(self)
    }
    #[doc = "Bit 4 - Counter reset mode"]
    #[inline(always)]
    #[must_use]
    pub fn cntrstm(&mut self) -> CNTRSTM_W<MTCTL0_SPEC, 4> {
        CNTRSTM_W::new(self)
    }
    #[doc = "Bit 5 - Half mode"]
    #[inline(always)]
    #[must_use]
    pub fn halfm(&mut self) -> HALFM_W<MTCTL0_SPEC, 5> {
        HALFM_W::new(self)
    }
    #[doc = "Bits 8:9 - Synchronization input source"]
    #[inline(always)]
    #[must_use]
    pub fn synisrc(&mut self) -> SYNISRC_W<MTCTL0_SPEC, 8> {
        SYNISRC_W::new(self)
    }
    #[doc = "Bit 10 - Synchronization input reset counter"]
    #[inline(always)]
    #[must_use]
    pub fn synirst(&mut self) -> SYNIRST_W<MTCTL0_SPEC, 10> {
        SYNIRST_W::new(self)
    }
    #[doc = "Bit 11 - Synchronization input start counter"]
    #[inline(always)]
    #[must_use]
    pub fn synistrt(&mut self) -> SYNISTRT_W<MTCTL0_SPEC, 11> {
        SYNISTRT_W::new(self)
    }
    #[doc = "Bits 12:13 - Synchronization output pulse"]
    #[inline(always)]
    #[must_use]
    pub fn synopls(&mut self) -> SYNOPLS_W<MTCTL0_SPEC, 12> {
        SYNOPLS_W::new(self)
    }
    #[doc = "Bits 14:15 - Synchronization output source"]
    #[inline(always)]
    #[must_use]
    pub fn synosrc(&mut self) -> SYNOSRC_W<MTCTL0_SPEC, 14> {
        SYNOSRC_W::new(self)
    }
    #[doc = "Bit 16 - The counter of Master_TIMER enable"]
    #[inline(always)]
    #[must_use]
    pub fn mtcen(&mut self) -> MTCEN_W<MTCTL0_SPEC, 16> {
        MTCEN_W::new(self)
    }
    #[doc = "Bit 17 - The counter of Slave_TIMER0 enable"]
    #[inline(always)]
    #[must_use]
    pub fn st0cen(&mut self) -> ST0CEN_W<MTCTL0_SPEC, 17> {
        ST0CEN_W::new(self)
    }
    #[doc = "Bit 18 - The counter of Slave_TIMER1 enable"]
    #[inline(always)]
    #[must_use]
    pub fn st1cen(&mut self) -> ST1CEN_W<MTCTL0_SPEC, 18> {
        ST1CEN_W::new(self)
    }
    #[doc = "Bit 19 - The counter of Slave_TIMER2 enable"]
    #[inline(always)]
    #[must_use]
    pub fn st2cen(&mut self) -> ST2CEN_W<MTCTL0_SPEC, 19> {
        ST2CEN_W::new(self)
    }
    #[doc = "Bit 20 - The counter of Slave_TIMER3 enable"]
    #[inline(always)]
    #[must_use]
    pub fn st3cen(&mut self) -> ST3CEN_W<MTCTL0_SPEC, 20> {
        ST3CEN_W::new(self)
    }
    #[doc = "Bit 21 - The counter of Slave_TIMER4 enable"]
    #[inline(always)]
    #[must_use]
    pub fn st4cen(&mut self) -> ST4CEN_W<MTCTL0_SPEC, 21> {
        ST4CEN_W::new(self)
    }
    #[doc = "Bits 25:26 - Trigger source to DAC"]
    #[inline(always)]
    #[must_use]
    pub fn dactrgs(&mut self) -> DACTRGS_W<MTCTL0_SPEC, 25> {
        DACTRGS_W::new(self)
    }
    #[doc = "Bit 27 - Shadow registers enable"]
    #[inline(always)]
    #[must_use]
    pub fn shwen(&mut self) -> SHWEN_W<MTCTL0_SPEC, 27> {
        SHWEN_W::new(self)
    }
    #[doc = "Bit 29 - Update event generated by repetition event"]
    #[inline(always)]
    #[must_use]
    pub fn uprep(&mut self) -> UPREP_W<MTCTL0_SPEC, 29> {
        UPREP_W::new(self)
    }
    #[doc = "Bits 30:31 - Update event selection"]
    #[inline(always)]
    #[must_use]
    pub fn upsel(&mut self) -> UPSEL_W<MTCTL0_SPEC, 30> {
        UPSEL_W::new(self)
    }
    #[doc = r" Writes raw bits to the register."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
    #[inline(always)]
    pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
        self.bits = bits;
        self
    }
}
#[doc = "SHRTIMER Master_TIMER control register 0\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`mtctl0::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`mtctl0::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct MTCTL0_SPEC;
impl crate::RegisterSpec for MTCTL0_SPEC {
    type Ux = u32;
}
#[doc = "`read()` method returns [`mtctl0::R`](R) reader structure"]
impl crate::Readable for MTCTL0_SPEC {}
#[doc = "`write(|w| ..)` method takes [`mtctl0::W`](W) writer structure"]
impl crate::Writable for MTCTL0_SPEC {
    const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
}
#[doc = "`reset()` method sets MTCTL0 to value 0"]
impl crate::Resettable for MTCTL0_SPEC {
    const RESET_VALUE: Self::Ux = 0;
}
