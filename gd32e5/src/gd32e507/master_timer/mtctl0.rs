#[doc = "Register `MTCTL0` reader"]
pub type R = crate::R<Mtctl0Spec>;
#[doc = "Register `MTCTL0` writer"]
pub type W = crate::W<Mtctl0Spec>;
#[doc = "Field `CNTCKDIV` reader - Counter clock division"]
pub type CntckdivR = crate::FieldReader;
#[doc = "Field `CNTCKDIV` writer - Counter clock division"]
pub type CntckdivW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
#[doc = "Field `CTNM` reader - Continuous mode"]
pub type CtnmR = crate::BitReader;
#[doc = "Field `CTNM` writer - Continuous mode"]
pub type CtnmW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `CNTRSTM` reader - Counter reset mode"]
pub type CntrstmR = crate::BitReader;
#[doc = "Field `CNTRSTM` writer - Counter reset mode"]
pub type CntrstmW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `HALFM` reader - Half mode"]
pub type HalfmR = crate::BitReader;
#[doc = "Field `HALFM` writer - Half mode"]
pub type HalfmW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `SYNISRC` reader - Synchronization input source"]
pub type SynisrcR = crate::FieldReader;
#[doc = "Field `SYNISRC` writer - Synchronization input source"]
pub type SynisrcW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
#[doc = "Field `SYNIRST` reader - Synchronization input reset counter"]
pub type SynirstR = crate::BitReader;
#[doc = "Field `SYNIRST` writer - Synchronization input reset counter"]
pub type SynirstW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `SYNISTRT` reader - Synchronization input start counter"]
pub type SynistrtR = crate::BitReader;
#[doc = "Field `SYNISTRT` writer - Synchronization input start counter"]
pub type SynistrtW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `SYNOPLS` reader - Synchronization output pulse"]
pub type SynoplsR = crate::FieldReader;
#[doc = "Field `SYNOPLS` writer - Synchronization output pulse"]
pub type SynoplsW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
#[doc = "Field `SYNOSRC` reader - Synchronization output source"]
pub type SynosrcR = crate::FieldReader;
#[doc = "Field `SYNOSRC` writer - Synchronization output source"]
pub type SynosrcW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
#[doc = "Field `MTCEN` reader - The counter of Master_TIMER enable"]
pub type MtcenR = crate::BitReader;
#[doc = "Field `MTCEN` writer - The counter of Master_TIMER enable"]
pub type MtcenW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `ST0CEN` reader - The counter of Slave_TIMER0 enable"]
pub type St0cenR = crate::BitReader;
#[doc = "Field `ST0CEN` writer - The counter of Slave_TIMER0 enable"]
pub type St0cenW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `ST1CEN` reader - The counter of Slave_TIMER1 enable"]
pub type St1cenR = crate::BitReader;
#[doc = "Field `ST1CEN` writer - The counter of Slave_TIMER1 enable"]
pub type St1cenW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `ST2CEN` reader - The counter of Slave_TIMER2 enable"]
pub type St2cenR = crate::BitReader;
#[doc = "Field `ST2CEN` writer - The counter of Slave_TIMER2 enable"]
pub type St2cenW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `ST3CEN` reader - The counter of Slave_TIMER3 enable"]
pub type St3cenR = crate::BitReader;
#[doc = "Field `ST3CEN` writer - The counter of Slave_TIMER3 enable"]
pub type St3cenW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `ST4CEN` reader - The counter of Slave_TIMER4 enable"]
pub type St4cenR = crate::BitReader;
#[doc = "Field `ST4CEN` writer - The counter of Slave_TIMER4 enable"]
pub type St4cenW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `DACTRGS` reader - Trigger source to DAC"]
pub type DactrgsR = crate::FieldReader;
#[doc = "Field `DACTRGS` writer - Trigger source to DAC"]
pub type DactrgsW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
#[doc = "Field `SHWEN` reader - Shadow registers enable"]
pub type ShwenR = crate::BitReader;
#[doc = "Field `SHWEN` writer - Shadow registers enable"]
pub type ShwenW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `UPREP` reader - Update event generated by repetition event"]
pub type UprepR = crate::BitReader;
#[doc = "Field `UPREP` writer - Update event generated by repetition event"]
pub type UprepW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `UPSEL` reader - Update event selection"]
pub type UpselR = crate::FieldReader;
#[doc = "Field `UPSEL` writer - Update event selection"]
pub type UpselW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
impl R {
    #[doc = "Bits 0:1 - Counter clock division"]
    #[inline(always)]
    pub fn cntckdiv(&self) -> CntckdivR {
        CntckdivR::new((self.bits & 3) as u8)
    }
    #[doc = "Bit 3 - Continuous mode"]
    #[inline(always)]
    pub fn ctnm(&self) -> CtnmR {
        CtnmR::new(((self.bits >> 3) & 1) != 0)
    }
    #[doc = "Bit 4 - Counter reset mode"]
    #[inline(always)]
    pub fn cntrstm(&self) -> CntrstmR {
        CntrstmR::new(((self.bits >> 4) & 1) != 0)
    }
    #[doc = "Bit 5 - Half mode"]
    #[inline(always)]
    pub fn halfm(&self) -> HalfmR {
        HalfmR::new(((self.bits >> 5) & 1) != 0)
    }
    #[doc = "Bits 8:9 - Synchronization input source"]
    #[inline(always)]
    pub fn synisrc(&self) -> SynisrcR {
        SynisrcR::new(((self.bits >> 8) & 3) as u8)
    }
    #[doc = "Bit 10 - Synchronization input reset counter"]
    #[inline(always)]
    pub fn synirst(&self) -> SynirstR {
        SynirstR::new(((self.bits >> 10) & 1) != 0)
    }
    #[doc = "Bit 11 - Synchronization input start counter"]
    #[inline(always)]
    pub fn synistrt(&self) -> SynistrtR {
        SynistrtR::new(((self.bits >> 11) & 1) != 0)
    }
    #[doc = "Bits 12:13 - Synchronization output pulse"]
    #[inline(always)]
    pub fn synopls(&self) -> SynoplsR {
        SynoplsR::new(((self.bits >> 12) & 3) as u8)
    }
    #[doc = "Bits 14:15 - Synchronization output source"]
    #[inline(always)]
    pub fn synosrc(&self) -> SynosrcR {
        SynosrcR::new(((self.bits >> 14) & 3) as u8)
    }
    #[doc = "Bit 16 - The counter of Master_TIMER enable"]
    #[inline(always)]
    pub fn mtcen(&self) -> MtcenR {
        MtcenR::new(((self.bits >> 16) & 1) != 0)
    }
    #[doc = "Bit 17 - The counter of Slave_TIMER0 enable"]
    #[inline(always)]
    pub fn st0cen(&self) -> St0cenR {
        St0cenR::new(((self.bits >> 17) & 1) != 0)
    }
    #[doc = "Bit 18 - The counter of Slave_TIMER1 enable"]
    #[inline(always)]
    pub fn st1cen(&self) -> St1cenR {
        St1cenR::new(((self.bits >> 18) & 1) != 0)
    }
    #[doc = "Bit 19 - The counter of Slave_TIMER2 enable"]
    #[inline(always)]
    pub fn st2cen(&self) -> St2cenR {
        St2cenR::new(((self.bits >> 19) & 1) != 0)
    }
    #[doc = "Bit 20 - The counter of Slave_TIMER3 enable"]
    #[inline(always)]
    pub fn st3cen(&self) -> St3cenR {
        St3cenR::new(((self.bits >> 20) & 1) != 0)
    }
    #[doc = "Bit 21 - The counter of Slave_TIMER4 enable"]
    #[inline(always)]
    pub fn st4cen(&self) -> St4cenR {
        St4cenR::new(((self.bits >> 21) & 1) != 0)
    }
    #[doc = "Bits 25:26 - Trigger source to DAC"]
    #[inline(always)]
    pub fn dactrgs(&self) -> DactrgsR {
        DactrgsR::new(((self.bits >> 25) & 3) as u8)
    }
    #[doc = "Bit 27 - Shadow registers enable"]
    #[inline(always)]
    pub fn shwen(&self) -> ShwenR {
        ShwenR::new(((self.bits >> 27) & 1) != 0)
    }
    #[doc = "Bit 29 - Update event generated by repetition event"]
    #[inline(always)]
    pub fn uprep(&self) -> UprepR {
        UprepR::new(((self.bits >> 29) & 1) != 0)
    }
    #[doc = "Bits 30:31 - Update event selection"]
    #[inline(always)]
    pub fn upsel(&self) -> UpselR {
        UpselR::new(((self.bits >> 30) & 3) as u8)
    }
}
impl W {
    #[doc = "Bits 0:1 - Counter clock division"]
    #[inline(always)]
    #[must_use]
    pub fn cntckdiv(&mut self) -> CntckdivW<Mtctl0Spec> {
        CntckdivW::new(self, 0)
    }
    #[doc = "Bit 3 - Continuous mode"]
    #[inline(always)]
    #[must_use]
    pub fn ctnm(&mut self) -> CtnmW<Mtctl0Spec> {
        CtnmW::new(self, 3)
    }
    #[doc = "Bit 4 - Counter reset mode"]
    #[inline(always)]
    #[must_use]
    pub fn cntrstm(&mut self) -> CntrstmW<Mtctl0Spec> {
        CntrstmW::new(self, 4)
    }
    #[doc = "Bit 5 - Half mode"]
    #[inline(always)]
    #[must_use]
    pub fn halfm(&mut self) -> HalfmW<Mtctl0Spec> {
        HalfmW::new(self, 5)
    }
    #[doc = "Bits 8:9 - Synchronization input source"]
    #[inline(always)]
    #[must_use]
    pub fn synisrc(&mut self) -> SynisrcW<Mtctl0Spec> {
        SynisrcW::new(self, 8)
    }
    #[doc = "Bit 10 - Synchronization input reset counter"]
    #[inline(always)]
    #[must_use]
    pub fn synirst(&mut self) -> SynirstW<Mtctl0Spec> {
        SynirstW::new(self, 10)
    }
    #[doc = "Bit 11 - Synchronization input start counter"]
    #[inline(always)]
    #[must_use]
    pub fn synistrt(&mut self) -> SynistrtW<Mtctl0Spec> {
        SynistrtW::new(self, 11)
    }
    #[doc = "Bits 12:13 - Synchronization output pulse"]
    #[inline(always)]
    #[must_use]
    pub fn synopls(&mut self) -> SynoplsW<Mtctl0Spec> {
        SynoplsW::new(self, 12)
    }
    #[doc = "Bits 14:15 - Synchronization output source"]
    #[inline(always)]
    #[must_use]
    pub fn synosrc(&mut self) -> SynosrcW<Mtctl0Spec> {
        SynosrcW::new(self, 14)
    }
    #[doc = "Bit 16 - The counter of Master_TIMER enable"]
    #[inline(always)]
    #[must_use]
    pub fn mtcen(&mut self) -> MtcenW<Mtctl0Spec> {
        MtcenW::new(self, 16)
    }
    #[doc = "Bit 17 - The counter of Slave_TIMER0 enable"]
    #[inline(always)]
    #[must_use]
    pub fn st0cen(&mut self) -> St0cenW<Mtctl0Spec> {
        St0cenW::new(self, 17)
    }
    #[doc = "Bit 18 - The counter of Slave_TIMER1 enable"]
    #[inline(always)]
    #[must_use]
    pub fn st1cen(&mut self) -> St1cenW<Mtctl0Spec> {
        St1cenW::new(self, 18)
    }
    #[doc = "Bit 19 - The counter of Slave_TIMER2 enable"]
    #[inline(always)]
    #[must_use]
    pub fn st2cen(&mut self) -> St2cenW<Mtctl0Spec> {
        St2cenW::new(self, 19)
    }
    #[doc = "Bit 20 - The counter of Slave_TIMER3 enable"]
    #[inline(always)]
    #[must_use]
    pub fn st3cen(&mut self) -> St3cenW<Mtctl0Spec> {
        St3cenW::new(self, 20)
    }
    #[doc = "Bit 21 - The counter of Slave_TIMER4 enable"]
    #[inline(always)]
    #[must_use]
    pub fn st4cen(&mut self) -> St4cenW<Mtctl0Spec> {
        St4cenW::new(self, 21)
    }
    #[doc = "Bits 25:26 - Trigger source to DAC"]
    #[inline(always)]
    #[must_use]
    pub fn dactrgs(&mut self) -> DactrgsW<Mtctl0Spec> {
        DactrgsW::new(self, 25)
    }
    #[doc = "Bit 27 - Shadow registers enable"]
    #[inline(always)]
    #[must_use]
    pub fn shwen(&mut self) -> ShwenW<Mtctl0Spec> {
        ShwenW::new(self, 27)
    }
    #[doc = "Bit 29 - Update event generated by repetition event"]
    #[inline(always)]
    #[must_use]
    pub fn uprep(&mut self) -> UprepW<Mtctl0Spec> {
        UprepW::new(self, 29)
    }
    #[doc = "Bits 30:31 - Update event selection"]
    #[inline(always)]
    #[must_use]
    pub fn upsel(&mut self) -> UpselW<Mtctl0Spec> {
        UpselW::new(self, 30)
    }
}
#[doc = "SHRTIMER Master_TIMER control register 0\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`mtctl0::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`mtctl0::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct Mtctl0Spec;
impl crate::RegisterSpec for Mtctl0Spec {
    type Ux = u32;
}
#[doc = "`read()` method returns [`mtctl0::R`](R) reader structure"]
impl crate::Readable for Mtctl0Spec {}
#[doc = "`write(|w| ..)` method takes [`mtctl0::W`](W) writer structure"]
impl crate::Writable for Mtctl0Spec {
    type Safety = crate::Unsafe;
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
}
#[doc = "`reset()` method sets MTCTL0 to value 0"]
impl crate::Resettable for Mtctl0Spec {
    const RESET_VALUE: u32 = 0;
}
